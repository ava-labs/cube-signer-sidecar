// Code generated by MockGen. DO NOT EDIT.
// Source: ../api/client.go
//
// Generated by this command:
//
//	mockgen -package=mockapi -source=../api/client.go -destination=../mockapi/mockclient.go
//

// Package mockapi is a generated GoMock package.
package mockapi

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	api "github.com/ava-labs/cubist-signer-sidecar/api"
	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// BlobSign mocks base method.
func (m *MockClientInterface) BlobSign(ctx context.Context, orgId, keyId string, body api.BlobSignJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, keyId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlobSign", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobSign indicates an expected call of BlobSign.
func (mr *MockClientInterfaceMockRecorder) BlobSign(ctx, orgId, keyId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, keyId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobSign", reflect.TypeOf((*MockClientInterface)(nil).BlobSign), varargs...)
}

// BlobSignWithBody mocks base method.
func (m *MockClientInterface) BlobSignWithBody(ctx context.Context, orgId, keyId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, keyId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlobSignWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobSignWithBody indicates an expected call of BlobSignWithBody.
func (mr *MockClientInterfaceMockRecorder) BlobSignWithBody(ctx, orgId, keyId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, keyId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobSignWithBody", reflect.TypeOf((*MockClientInterface)(nil).BlobSignWithBody), varargs...)
}

// GetKeyInOrg mocks base method.
func (m *MockClientInterface) GetKeyInOrg(ctx context.Context, orgId, keyId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, keyId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyInOrg", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyInOrg indicates an expected call of GetKeyInOrg.
func (mr *MockClientInterfaceMockRecorder) GetKeyInOrg(ctx, orgId, keyId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, keyId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInOrg", reflect.TypeOf((*MockClientInterface)(nil).GetKeyInOrg), varargs...)
}

// SignerSessionRefresh mocks base method.
func (m *MockClientInterface) SignerSessionRefresh(ctx context.Context, orgId string, body api.SignerSessionRefreshJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignerSessionRefresh", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignerSessionRefresh indicates an expected call of SignerSessionRefresh.
func (mr *MockClientInterfaceMockRecorder) SignerSessionRefresh(ctx, orgId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignerSessionRefresh", reflect.TypeOf((*MockClientInterface)(nil).SignerSessionRefresh), varargs...)
}

// SignerSessionRefreshWithBody mocks base method.
func (m *MockClientInterface) SignerSessionRefreshWithBody(ctx context.Context, orgId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignerSessionRefreshWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignerSessionRefreshWithBody indicates an expected call of SignerSessionRefreshWithBody.
func (mr *MockClientInterfaceMockRecorder) SignerSessionRefreshWithBody(ctx, orgId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignerSessionRefreshWithBody", reflect.TypeOf((*MockClientInterface)(nil).SignerSessionRefreshWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// BlobSignWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) BlobSignWithBodyWithResponse(ctx context.Context, orgId, keyId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.BlobSignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, keyId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlobSignWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.BlobSignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobSignWithBodyWithResponse indicates an expected call of BlobSignWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) BlobSignWithBodyWithResponse(ctx, orgId, keyId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, keyId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobSignWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).BlobSignWithBodyWithResponse), varargs...)
}

// BlobSignWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) BlobSignWithResponse(ctx context.Context, orgId, keyId string, body api.BlobSignJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.BlobSignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, keyId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlobSignWithResponse", varargs...)
	ret0, _ := ret[0].(*api.BlobSignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobSignWithResponse indicates an expected call of BlobSignWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) BlobSignWithResponse(ctx, orgId, keyId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, keyId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobSignWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).BlobSignWithResponse), varargs...)
}

// GetKeyInOrgWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetKeyInOrgWithResponse(ctx context.Context, orgId, keyId string, reqEditors ...api.RequestEditorFn) (*api.GetKeyInOrgResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, keyId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyInOrgWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetKeyInOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyInOrgWithResponse indicates an expected call of GetKeyInOrgWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetKeyInOrgWithResponse(ctx, orgId, keyId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, keyId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInOrgWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetKeyInOrgWithResponse), varargs...)
}

// SignerSessionRefreshWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SignerSessionRefreshWithBodyWithResponse(ctx context.Context, orgId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.SignerSessionRefreshResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignerSessionRefreshWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.SignerSessionRefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignerSessionRefreshWithBodyWithResponse indicates an expected call of SignerSessionRefreshWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SignerSessionRefreshWithBodyWithResponse(ctx, orgId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignerSessionRefreshWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SignerSessionRefreshWithBodyWithResponse), varargs...)
}

// SignerSessionRefreshWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SignerSessionRefreshWithResponse(ctx context.Context, orgId string, body api.SignerSessionRefreshJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.SignerSessionRefreshResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orgId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignerSessionRefreshWithResponse", varargs...)
	ret0, _ := ret[0].(*api.SignerSessionRefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignerSessionRefreshWithResponse indicates an expected call of SignerSessionRefreshWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SignerSessionRefreshWithResponse(ctx, orgId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orgId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignerSessionRefreshWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SignerSessionRefreshWithResponse), varargs...)
}
